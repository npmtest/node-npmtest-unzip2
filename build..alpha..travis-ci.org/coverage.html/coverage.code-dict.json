{"/home/travis/build/npmtest/node-npmtest-unzip2/test.js":"/* istanbul instrument in package npmtest_unzip2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-unzip2/lib.npmtest_unzip2.js":"/* istanbul instrument in package npmtest_unzip2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_unzip2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_unzip2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-unzip2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-unzip2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_unzip2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_unzip2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_unzip2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_unzip2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_unzip2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_unzip2.__dirname + '/lib.npmtest_unzip2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-unzip2/node_modules/unzip2/unzip.js":"'use strict';\r\n\r\nexports.Parse = require('./lib/parse');\r\nexports.Extract = require('./lib/extract');","/home/travis/build/npmtest/node-npmtest-unzip2/node_modules/unzip2/lib/parse.js":"'use strict';\r\n\r\nmodule.exports = Parse.create = Parse;\r\n\r\nrequire(\"setimmediate\");\r\nvar Transform = require('stream').Transform;\r\nvar inherits = require('util').inherits;\r\nvar zlib = require('zlib');\r\nvar binary = require('binary');\r\nvar PullStream = require('pullstream');\r\nvar MatchStream = require('match-stream');\r\nvar Entry = require('./entry');\r\n\r\nif (!Transform) {\r\n  Transform = require('readable-stream/transform');\r\n}\r\n\r\ninherits(Parse, Transform);\r\n\r\nfunction Parse(opts) {\r\n  var self = this;\r\n  if (!(this instanceof Parse)) {\r\n    return new Parse(opts);\r\n  }\r\n\r\n  Transform.call(this, { lowWaterMark: 0 });\r\n  this._opts = opts || { verbose: false };\r\n  this._hasEntryListener = false;\r\n\r\n  this._pullStream = new PullStream();\r\n  this._pullStream.on(\"error\", function (e) {\r\n    self.emit('error', e);\r\n  });\r\n  this._pullStream.once(\"end\", function () {\r\n    self._streamEnd = true;\r\n  });\r\n  this._pullStream.once(\"finish\", function () {\r\n    self._streamFinish = true;\r\n  });\r\n\r\n  this._readRecord();\r\n}\r\n\r\nParse.prototype._readRecord = function () {\r\n  var self = this;\r\n  this._pullStream.pull(4, function (err, data) {\r\n    if (err) {\r\n      return self.emit('error', err);\r\n    }\r\n\r\n    if (data.length === 0) {\r\n      return;\r\n    }\r\n\r\n    var signature = data.readUInt32LE(0);\r\n    if (signature === 0x04034b50) {\r\n      self._readFile();\r\n    } else if (signature === 0x02014b50) {\r\n      self._readCentralDirectoryFileHeader();\r\n    } else if (signature === 0x06054b50) {\r\n      self._readEndOfCentralDirectoryRecord();\r\n    } else {\r\n      err = new Error('invalid signature: 0x' + signature.toString(16));\r\n      self.emit('error', err);\r\n    }\r\n  });\r\n};\r\n\r\nParse.prototype._readFile = function () {\r\n  var self = this;\r\n  this._pullStream.pull(26, function (err, data) {\r\n    if (err) {\r\n      return self.emit('error', err);\r\n    }\r\n\r\n    var vars = binary.parse(data)\r\n      .word16lu('versionsNeededToExtract')\r\n      .word16lu('flags')\r\n      .word16lu('compressionMethod')\r\n      .word16lu('lastModifiedTime')\r\n      .word16lu('lastModifiedDate')\r\n      .word32lu('crc32')\r\n      .word32lu('compressedSize')\r\n      .word32lu('uncompressedSize')\r\n      .word16lu('fileNameLength')\r\n      .word16lu('extraFieldLength')\r\n      .vars;\r\n\r\n    return self._pullStream.pull(vars.fileNameLength, function (err, fileName) {\r\n      if (err) {\r\n        return self.emit('error', err);\r\n      }\r\n      fileName = fileName.toString('utf8');\r\n      var entry = new Entry();\r\n      entry.path = fileName;\r\n      entry.props.path = fileName;\r\n      entry.type = (vars.compressedSize === 0 && /[\\/\\\\]$/.test(fileName)) ? 'Directory' : 'File';\r\n\r\n      if (self._opts.verbose) {\r\n        if (entry.type === 'Directory') {\r\n          console.log('   creating:', fileName);\r\n        } else if (entry.type === 'File') {\r\n          if (vars.compressionMethod === 0) {\r\n            console.log(' extracting:', fileName);\r\n          } else {\r\n            console.log('  inflating:', fileName);\r\n          }\r\n        }\r\n      }\r\n\r\n      var hasEntryListener = self._hasEntryListener;\r\n      if (hasEntryListener) {\r\n        self.emit('entry', entry);\r\n      }\r\n\r\n      self._pullStream.pull(vars.extraFieldLength, function (err, extraField) {\r\n        if (err) {\r\n          return self.emit('error', err);\r\n        }\r\n        if (entry.type === 'Directory') {\r\n          self._pullStream.pull(vars.compressedSize, function (err, compressedData) {\r\n            if (err) {\r\n              return self.emit('error', err);\r\n            }\r\n\r\n            if (hasEntryListener) {\r\n              entry.write(compressedData);\r\n              entry.end();\r\n            }\r\n\r\n            return self._readRecord();\r\n          });\r\n        } else {\r\n          var fileSizeKnown = !(vars.flags & 0x08);\r\n          var has_compression = !(vars.compressionMethod === 0);\r\n          var inflater;\r\n\r\n          if(has_compression) {\r\n            inflater = zlib.createInflateRaw();\r\n            inflater.on('error', function (err) {\r\n              self.emit('error', err);\r\n            });\r\n          }\r\n\r\n          if (fileSizeKnown) {\r\n            entry.size = vars.uncompressedSize;\r\n            if (hasEntryListener) {\r\n              entry.on('finish', self._readRecord.bind(self));\r\n              if(has_compression) {\r\n                self._pullStream.pipe(vars.compressedSize, inflater).pipe(entry);\r\n              } else {\r\n                self._pullStream.pipe(vars.compressedSize, entry);\r\n              }\r\n            } else {\r\n              self._pullStream.drain(vars.compressedSize, function (err) {\r\n                if (err) {\r\n                  return self.emit('error', err);\r\n                }\r\n                self._readRecord();\r\n              });\r\n            }\r\n          } else {\r\n            var descriptorSig = new Buffer(4);\r\n            descriptorSig.writeUInt32LE(0x08074b50, 0);\r\n\r\n            var matchStream = new MatchStream({ pattern: descriptorSig }, function (buf, matched, extra) {\r\n              if (hasEntryListener) {\r\n                if (!matched) {\r\n                  return this.push(buf);\r\n                }\r\n                this.push(buf);\r\n              }\r\n              self._pullStream.unpipe();\r\n              self._pullStream.prepend(extra);\r\n              setImmediate(function() {\r\n                self._processDataDescriptor(entry);\r\n              });\r\n              return this.push(null);\r\n            });\r\n\r\n            self._pullStream.pipe(matchStream);\r\n            if (hasEntryListener) {\r\n              if(has_compression) {\r\n                matchStream.pipe(inflater).pipe(entry);\r\n              } else {\r\n                matchStream.pipe(entry);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nParse.prototype._processDataDescriptor = function (entry) {\r\n  var self = this;\r\n  this._pullStream.pull(16, function (err, data) {\r\n    if (err) {\r\n      return self.emit('error', err);\r\n    }\r\n\r\n    var vars = binary.parse(data)\r\n      .word32lu('dataDescriptorSignature')\r\n      .word32lu('crc32')\r\n      .word32lu('compressedSize')\r\n      .word32lu('uncompressedSize')\r\n      .vars;\r\n\r\n    entry.size = vars.uncompressedSize;\r\n    self._readRecord();\r\n  });\r\n};\r\n\r\nParse.prototype._readCentralDirectoryFileHeader = function () {\r\n  var self = this;\r\n  this._pullStream.pull(42, function (err, data) {\r\n    if (err) {\r\n      return self.emit('error', err);\r\n    }\r\n\r\n    var vars = binary.parse(data)\r\n      .word16lu('versionMadeBy')\r\n      .word16lu('versionsNeededToExtract')\r\n      .word16lu('flags')\r\n      .word16lu('compressionMethod')\r\n      .word16lu('lastModifiedTime')\r\n      .word16lu('lastModifiedDate')\r\n      .word32lu('crc32')\r\n      .word32lu('compressedSize')\r\n      .word32lu('uncompressedSize')\r\n      .word16lu('fileNameLength')\r\n      .word16lu('extraFieldLength')\r\n      .word16lu('fileCommentLength')\r\n      .word16lu('diskNumber')\r\n      .word16lu('internalFileAttributes')\r\n      .word32lu('externalFileAttributes')\r\n      .word32lu('offsetToLocalFileHeader')\r\n      .vars;\r\n\r\n    return self._pullStream.pull(vars.fileNameLength, function (err, fileName) {\r\n      if (err) {\r\n        return self.emit('error', err);\r\n      }\r\n      fileName = fileName.toString('utf8');\r\n\r\n      self._pullStream.pull(vars.extraFieldLength, function (err, extraField) {\r\n        if (err) {\r\n          return self.emit('error', err);\r\n        }\r\n        self._pullStream.pull(vars.fileCommentLength, function (err, fileComment) {\r\n          if (err) {\r\n            return self.emit('error', err);\r\n          }\r\n          return self._readRecord();\r\n        });\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nParse.prototype._readEndOfCentralDirectoryRecord = function () {\r\n  var self = this;\r\n  this._pullStream.pull(18, function (err, data) {\r\n    if (err) {\r\n      return self.emit('error', err);\r\n    }\r\n\r\n    var vars = binary.parse(data)\r\n      .word16lu('diskNumber')\r\n      .word16lu('diskStart')\r\n      .word16lu('numberOfRecordsOnDisk')\r\n      .word16lu('numberOfRecords')\r\n      .word32lu('sizeOfCentralDirectory')\r\n      .word32lu('offsetToStartOfCentralDirectory')\r\n      .word16lu('commentLength')\r\n      .vars;\r\n\r\n    if (vars.commentLength) {\r\n      setImmediate(function() {\r\n        self._pullStream.pull(vars.commentLength, function (err, comment) {\r\n          if (err) {\r\n            return self.emit('error', err);\r\n          }\r\n          comment = comment.toString('utf8');\r\n          return self._pullStream.end();\r\n        });\r\n      });\r\n\r\n    } else {\r\n      self._pullStream.end();\r\n    }\r\n  });\r\n};\r\n\r\nParse.prototype._transform = function (chunk, encoding, callback) {\r\n  if (this._pullStream.write(chunk)) {\r\n    return callback();\r\n  }\r\n\r\n  this._pullStream.once('drain', callback);\r\n};\r\n\r\nParse.prototype.pipe = function (dest, opts) {\r\n  var self = this;\r\n  if (typeof dest.add === \"function\") {\r\n    self.on(\"entry\", function (entry) {\r\n      dest.add(entry);\r\n    })\r\n  }\r\n  return Transform.prototype.pipe.apply(this, arguments);\r\n};\r\n\r\nParse.prototype._flush = function (callback) {\r\n  if (!this._streamEnd || !this._streamFinish) {\r\n    return setImmediate(this._flush.bind(this, callback));\r\n  }\r\n\r\n  this.emit('close');\r\n  return callback();\r\n};\r\n\r\nParse.prototype.addListener = function(type, listener) {\r\n  if ('entry' === type) {\r\n    this._hasEntryListener = true;\r\n  }\r\n  return Transform.prototype.addListener.call(this, type, listener);\r\n};\r\n\r\nParse.prototype.on = Parse.prototype.addListener;","/home/travis/build/npmtest/node-npmtest-unzip2/node_modules/unzip2/lib/entry.js":"'use strict';\r\n\r\nmodule.exports = Entry;\r\n\r\nvar PassThrough = require('stream').PassThrough;\r\nvar inherits = require('util').inherits;\r\n\r\nif (!PassThrough) {\r\n  PassThrough = require('readable-stream/passthrough');\r\n}\r\n\r\ninherits(Entry, PassThrough);\r\n\r\nfunction Entry () {\r\n  PassThrough.call(this);\r\n  this.props = {};\r\n}\r\n\r\nEntry.prototype.autodrain = function () {\r\n  this.on('readable', this.read.bind(this));\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-unzip2/node_modules/unzip2/lib/extract.js":"'use strict';\r\n\r\nmodule.exports = Extract;\r\n\r\nvar Parse = require(\"../unzip\").Parse;\r\nvar Writer = require(\"fstream\").Writer;\r\nvar Writable = require('stream').Writable;\r\nvar path = require('path');\r\nvar inherits = require('util').inherits;\r\n\r\nif (!Writable) {\r\n  Writable = require('readable-stream/writable');\r\n}\r\n\r\ninherits(Extract, Writable);\r\n\r\nfunction Extract (opts) {\r\n  var self = this;\r\n  if (!(this instanceof Extract)) {\r\n    return new Extract(opts);\r\n  }\r\n\r\n  Writable.apply(this);\r\n  this._opts = opts || { verbose: false };\r\n\r\n  this._parser = Parse(this._opts);\r\n  this._parser.on('error', function(err) {\r\n    self.emit('error', err);\r\n  });\r\n  this.on('finish', function() {\r\n    self._parser.end();\r\n  });\r\n\r\n  var writer = Writer({\r\n    type: 'Directory',\r\n    path: opts.path\r\n  });\r\n  writer.on('error', function(err) {\r\n    self.emit('error', err);\r\n  });\r\n  writer.on('close', function() {\r\n    self.emit('close')\r\n  });\r\n\r\n  this.on('pipe', function(source) {\r\n    if (opts.verbose && source.path) {\r\n      console.log('Archive: ', source.path);\r\n    }\r\n  });\r\n\r\n  this._parser.pipe(writer);\r\n}\r\n\r\nExtract.prototype._write = function (chunk, encoding, callback) {\r\n  if (this._parser.write(chunk)) {\r\n    return callback();\r\n  }\r\n\r\n  return this._parser.once('drain', callback);\r\n};\r\n"}